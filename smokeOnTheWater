/*
 * M2.c
 *Project's Description:
 *Pin Match:
	Input:
	Output:
 * Created: 25/11/2017 4:17:44 μμ
 * Author : Doras Konstantinos && Chariton Palaiologk 
 */ 

#define F_CPU 1000000 // define the cpu frequency

#include <avr/io.h> //I/O Avr library
#include <avr/interrupt.h> //Interrupt Avr library
#include <math.h>
#include <stdio.h>
// function declaration

void initial(); //Initialization.
void timer_interrupt();//
void setupADC(); //Initialization of ADC.
void startADC(); //Start Conversion	of analog input to digital.
void detectColors(); //Detect colors based on the ADC values.


int main(void)
{
	
    initial();
	timer_interrupt();
    setupADC();
    sei();
    while (1) 
    {
	}
}

void initial()
{
	DDRD|=(1<<DDD4);
	
	DDRB=255;
	PORTB=1;
	DDRC=1;
	DDRC &= ~(1 << PINC1); // set pin1 input
	
}

void timer_interrupt()
{ 
	TCCR1A |= (1<<COM1B1);  //Clear OC1A/OC1B on compare match
	TCCR1B |= (1<<WGM13) |  (1<<CS10); 	//prescaler(8)	//mode 8, PWM, Phase and Frequency Correct (TOP value is ICR1)
	TIMSK |=(1<<TOIE1);
	TIFR |=(0<<TOV1);
}



void setupADC()
{
	ADMUX = (0 << REFS1) | (1 << REFS0)  |  (0 << MUX0)  |  (0 << MUX1) |  (0 << MUX2) |  (0 << MUX3) | ( 0 << MUX4);//Set PA0 as ADC pin (For MUX values) , set reference voltage the Vcc of our MCU (REFS) : datasheet screenshots http://prntscr.com/heddod  http://prntscr.com/hedglz
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //ADEN -> ADC enable , ADIE -> interrupt enable of adc , ADPS -> ADC prescaler (division F_CPU/(ADPS value),in this case 16000000/128=125000 Hz) : datasheet screenshots  http://prntscr.com/hedt1t  http://prntscr.com/hedtkk  http://prntscr.com/hedune
	startADC();
}

void startADC()
{
	ADCSRA |= (1<< ADSC); //Start the ADC conversion http://prntscr.com/hedt1t   https://prnt.sc/hedxkz
}

void detectColors()
{
	//Analog voltage input conversion to ADC's 10 bit register  https://prnt.sc/hgtfac
	OCR1B=0;
	int value;
	if(bit_is_clear(PINC,1))
	{
		PORTC=3;
		if(ADC >= 357 && ADC<= 377 )
		{
			OCR1B=100;
			PORTB=9; //Red ADC value as measured and converted into 10 bit ADC resolution 293
			//Calculation Vldr*1024/5,24 , Vldr for red is 1.52 Volt approx.
			value=466;
			
		}

		 if(ADC>=156 && ADC<=186)
		{
			OCR1B=100;
			PORTB=17; //Blue ADC value as measured and converted into 10 bit ADC resolution 117
			//Calculation Vldr*1024/5,24 , Vldr for red is 0.62 Volt approx.
			value=523;
		
		}
		 if(ADC>=404 && ADC<=424) 
		{
			OCR1B=100;
			PORTB=5; //Green ADC value as measured and converted into 10 bit ADC resolution 328
			//Calculation Vldr*1024/5,24 , Vldr for red is 1.7 Volt approx.
			value=554;
		
		}
		 if(ADC>=469 && ADC<=499) 
		{
			OCR1B=100;
			PORTB=3; //Yellow ADC value as measured and converted into 10 bit ADC resolution 402
			//Calculation Vldr*1024/5,24 , Vldr for red is 2.11 Volt approx.
			value=392;
			
		}
	
	}
	else
	{
		value=0;
		PORTC=2;
		PORTB=1;
	}
	ICR1H=(value>>8);
	ICR1L=value;	
	
}


ISR(TIMER1_OVF_vect)
{	
	detectColors();
} 

ISR(ADC_vect)
{
	startADC(); 
}

