/*
 * M3.c
 *Project's Description: In this project we use an ATMEGA16 MCU to achieve color detection of red,blue,green and yellow using a LDR-based sensor.
 The detection is based on the sensor's output voltage (Vout) (input to our ADC) which differs from color to color. After reading the Vout of every color
 and converting it to a 10bit representation, we matched our calculations (with a deviation of +-20) with each color. Finally we used a RGB LED, a yellow LED 
 and a piezoelectric as outputs, turning them on, on the corresponding color, in every case (blue and green in the case of yellow) by setting the PORTÎ’x to 1 
 (for the LEDs) and  adjusting the duty cycle on PORTD4 using the Phase and frequency modulation mode (for sound generation), in the case of "no color" the  LED stays turned off
 and the duty cycle is set to 0.
 *NOTES: The whole project is done using interrupts and our own functions only. 
		 Implementation was changed after discussion with professor A.Dollas, 2 white LEDs were added in order to achieve more realistic system with random 
		 not glowing objects.
		 Basic differences with the other (Fast PWM) implementation are.
		 -Switch button 0 added, now the detection and the white LED lighting starts only after pushing the SW0.
		 -Timer/Counter1 (16-bit) used instead of Timer/Counter0 (8-bit).
		 -Phase and frequency modulation instead of fast PWM.
 *Pin Match:
	Input: PA0 (ADC mode), PC1 (Switch button)
	Output: PB0 (Vin for our sensor), PB1 (set to 1 if yellow color detected), PB2 (set to 1 if blue color detected), PB3 (set to 1 if red color detected),
	PB4 (set to 1 if green color detected), PC0 (set to 1 if Switch button0 is pressed), PD4 (Phase and frequency modulation mode)
 *                                                          --------------
                                    PB0=1 (Vin for the LDR)|      \/      |PA0 = 0 - 5,24V (ADC) 
                            PB1=1 If yellow detected else 0|              |
                              PB2=1 If blue detected else 0|              |
                               PB3=1 If red detected else 0|              |
                                                           |              |
                                                           |              |
                                                           |              |
                                                           |              |
                                                           |              |
                                                        VCC|              |
                                                        GND|              |
                                                           |              |
                                                           |              |
                                                           |              |
                                                           |              |
                                                           |              |
				                           |              |
                  PD4 = Phase and frequency modulation mode|              |PC1=SW0
                                     (for sound generation)|              |PC0=1 if SW0==1 (Vin for the white LEDs)
                                                           |              |
                                                            --------------
 
 * Created: 25/11/2017 4:17:44 ??
 * Authors : Doras Konstantinos && Chariton Palaiologk 
*/

#define F_CPU 1000000 // define the cpu frequency

#include <avr/io.h> //I/O Avr library
#include <avr/interrupt.h> //Interrupt Avr library
#include <math.h>
#include <stdio.h>
// function declaration

void initial(); //Initialization.
void timer_interrupt();//
void setupADC(); //Initialization of ADC.
void startADC(); //Start Conversion	of analog input to digital.
void detectColors(); //Detect colors based on the ADC values.


int main(void)
{
	
    initial();
	timer_interrupt();
    setupADC();
    sei();
    while (1) 
    {
	}
}

void initial()
{
	DDRD|=(1<<DDD4);
	
	DDRB=255;
	PORTB=1;
	DDRC=1;
	DDRC &= ~(1 << PINC1); // set pin1 input
	
}

void timer_interrupt()
{ 
	TCCR1A |= (1<<COM1B1);  //Clear OC1A/OC1B on compare match
	TCCR1B |= (1<<WGM13) |  (1<<CS10); 	//prescaler(8)	//mode 8, PWM, Phase and Frequency Correct (TOP value is ICR1)
	TIMSK |=(1<<TOIE1);
	TIFR |=(0<<TOV1);
}



void setupADC()
{
	ADMUX = (0 << REFS1) | (1 << REFS0)  |  (0 << MUX0)  |  (0 << MUX1) |  (0 << MUX2) |  (0 << MUX3) | ( 0 << MUX4);//Set PA0 as ADC pin (For MUX values) , set reference voltage the Vcc of our MCU (REFS) : datasheet screenshots http://prntscr.com/heddod  http://prntscr.com/hedglz
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //ADEN -> ADC enable , ADIE -> interrupt enable of adc , ADPS -> ADC prescaler (division F_CPU/(ADPS value),in this case 16000000/128=125000 Hz) : datasheet screenshots  http://prntscr.com/hedt1t  http://prntscr.com/hedtkk  http://prntscr.com/hedune
	startADC();
}

void startADC()
{
	ADCSRA |= (1<< ADSC); //Start the ADC conversion http://prntscr.com/hedt1t   https://prnt.sc/hedxkz
}

void detectColors()
{
	//Analog voltage input conversion to ADC's 10 bit register  https://prnt.sc/hgtfac
	OCR1B=0;
	int value;
	if(bit_is_clear(PINC,1))
	{
		PORTC=3;
		if(ADC >= 510 && ADC<= 530 )
		{
			OCR1B=100;
			PORTB=9; //Red ADC value as measured and converted into 10 bit ADC resolution 520
			//Calculation Vldr*1024/5,24 , Vldr for red is 1.52 Volt approx.
			value=392;
			
		}

		 if(ADC>=353 && ADC<=373)
		{
			OCR1B=100;
			PORTB=17; //Blue ADC value as measured and converted into 10 bit ADC resolution 363
			//Calculation Vldr*1024/5,24 , Vldr for red is 0.62 Volt approx.
			value=466;
		
		}
		 if(ADC>=617 && ADC<=637) 
		{
			OCR1B=100;
			PORTB=5; //Green ADC value as measured and converted into 10 bit ADC resolution 627
			//Calculation Vldr*1024/5,24 , Vldr for red is 1.7 Volt approx.
			value=523;
		
		}
		 if(ADC>=685 && ADC<=705) 
		{
			OCR1B=100;
			PORTB=3; //Yellow ADC value as measured and converted into 10 bit ADC resolution 695
			//Calculation Vldr*1024/5,24 , Vldr for red is 2.11 Volt approx.
			value=554;
			
		}
	
	}
	else
	{
		value=0;
		PORTC=2;
		PORTB=1;
	}
	ICR1H=(value>>8);
	ICR1L=value;	
	
}


ISR(TIMER1_OVF_vect)
{	
	detectColors();
} 

ISR(ADC_vect)
{
	startADC(); 
}

